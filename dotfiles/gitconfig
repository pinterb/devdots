[user]
	email = brad.pinter@gmail.com
	name = Brad Pinter
[core]
  editor = vim
  quotepath = false
[push]
	default = simple
[github]
	user = pinterb
[color]
  ui = auto
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "status"]
  added = yellow
  changed = green
  untracked = cyan

# Enforce SSH
[url "ssh://git@github.com/"]
  insteadOf = https://github.com/
[url "ssh://git@gitlab.com/"]
  insteadOf = https://gitlab.com/
[url "ssh://git@bitbucket.org/"]
  insteadOf = https://bitbucket.org/

[alias]
#
# Working with branches
#

# Get the current branch name (not so useful in itself, but used in
# other aliases)
  branch-name = "!git rev-parse --abbrev-ref HEAD"

# Push the current branch to the remote "origin", and set it to track
# the upstream branch
  publish = "!git push -u origin $(git branch-name)"

# Delete the remote version of the current branch
  unpublish = "!git push origin :$(git branch-name)"

# Delete a branch and recreate it from master â€” useful if you have, say,
# a development branch and a master branch and they could conceivably go
# out of sync
  recreate = "!f() { [[ -n $@ ]] && git checkout \"$@\" && git unpublish && git checkout master && git branch -D \"$@\" && git checkout -b \"$@\" && git publish; }; f"

# Fire up your difftool (e.g. Kaleidescope) with all the changes that
# are on the current branch.
  code-review = difftool origin/master...

# Given a merge commit, find the span of commits that exist(ed) on that
# branch. Again, not so useful in itself, but used by other aliases.
  merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

# # Find the commits that were introduced by a merge
  merge-log = "!git log `git merge-span .. $1`"

# Show the changes that were introduced by a merge
  merge-diff = "!git diff `git merge-span ... $1`"

# As above, but in your difftool
  merge-difftool = "!git difftool `git merge-span ... $1`"

# Interactively rebase all the commits on the current branch
  rebase-branch = "!git rebase -i `git merge-base master HEAD`"

